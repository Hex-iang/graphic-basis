# Assignment 3 implementation report
* Arthur: Hexiang Hu 301239910
* all output images are in the "images" directory 

## Program Usage

raycast [scene option] [max step] [additional option]
  * scene option(-b | -d | -u):
    * -b : bonus scene with loading and rendering chess
    * -d : default scene with rendering sphere
    * -u : user scene with transparency settin on sphere
  * max step(a number):
    * use a number to define the maximum recursive depth of ray tracing program
  * additional option:
    * +s : add shadow effect
    * +l : add reflection effect
    * +r : add refraction effect
    * +c : add chessboard object to the scene
    * +f : add diffuse reflection effect
    * +p : add anti-aliasing effect(default)

    * +p +ps: turn on poisson anti-aliasing effect
    
    * +b0/+b1/+b2/+b3: adjust bonus scene objects(default: +b0), only work with bonus scene
    * +a0/+a1/+a2:  use different accerlerate structure in bonus scene triangle mesh. only work with bonus scene

## Basic Part
  1. Ray‚Äêsphere intersection and local reflectance:       [Achieved]
    * test command: ./raycast [-d | -u] 5

  2. Shadows:                                             [Achieved]
    * test command: ./raycast [-d | -u] 5 +s

  3. Reflections:                                         [Achieved]
    * test command: ./raycast [-d | -u] 5 +s +l

  4. Chess Board:                                         [Achieved]
    * test command: ./raycast [-d | -u] 5 +s +l +c
    * In the user/default scene, the chess board is 8 x 8, and in the bonus scene, it will become a infinite chess board
  5. Refraction:                                          [Achieved]
    * test command: ./raycast -u 5 +s +l +c +r

    * Note: since that in the default scene, there is no transparency setted, please do test this feature through user scene.
      * In the user scene, the transmission rate is set as 1.1 for each ball
    
  6. Diffuse Reflection:                                  [Achieved]
    * test command: ./raycast [-d | -u] +s +l +r +c +f
  7. Super Sampling:                                      [Achieved]
    * test command: ./raycast [-d | -u] +s +l +r +c +f +p

  8. Additional Features: Poisson Anti-aliasing 
    * an alternative way for super sampling
    * test command: ./raycast [-d | -u] +s +l +r +c +f +p +b 

***

## Bonus Part
1. Render Scene With Chess Pieces on Chess Board         [Achieved]
  * In my implementation, I made the program being able to render a scene with four piece of chess and a mirror in the back.
  * You could find the result images in images directory:
    * "images/bonus-scene.bmp"            - the entire bonus scene I rendered
    * "images/low-resolution-chess.bmp"   - the scene with low-resolution chess
    * "images/high-resolution-chess.bmp"  - the scene with all chesses
  
  * Test command: 
    * ./raycast -b 5 +s +l +r +c +p +f +b3 +m +a2
      * Note: Here I recommend using +a2 since it will give the best performance. It will take around 1252.7 secs to render the scene, if you cannot wait, just turn off the mirror by using "./raycast -b 5 +s +l +r +c +p +f +b3 +a2" command, the result should be rendered in 250 secs.

2. Improve the intersection with some methods            [Achieved]
	* Non-accelerated naive intersection: 
    * test command: ./raycast -b 5 +s +l +r +c +p +f +b0 +a0
	* Single bounding volume accerleration: 
    * test command: ./raycast -b 5 +s +l +r +c +p +f +b0 +a1
  * Spatial grid accerleration:
    * test command: ./raycast -b 5 +s +l +r +c +p +f +b0 +a2


### Intersection case study

For the purpose of comparing each method, I did a case study with different objects in the scene, and following is a comparable result to those scene. You can check the effect through intersection test number and rendering time (on csil linux machine)

* Rendering result for certain scene( I exclude diffuse reflection for fast testing)
  * __Naive intersection__
    * Render 1 low-resolution chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b0 +a0
        * intersection test:  1011020400
        * total time:         19.9468 secs
    * Render 2 low-resolution chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b1 +a0
        * intersection test:  2756540816
        * total time:         56.6689 secs
    * Render 2 high-resolution chess pieces/all chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b2 +a0
        * intersection test:  43429069568 
        * total time:         941.5943 secs
    * Render all chess pieces 
      * test command: ./raycast -b 5 +s +l +r +c +p +b3 +a0
        * intersection test:  59817822409
        * total time:         1371.9365 secs

  * Single bounding box accelerated
    * __Render 1 low-resolution chess pieces__
      * test command: ./raycast -b 5 +s +l +r +c +p +b0 +a1
        * intersection test:  59352960
        * total time:         1.56418 secs
    * Render 2 low-resolution chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b1 +a1
        * intersection test:  153213168
        * total time:         3.53121 secs
    * Render 2 high-resolution chess pieces 
      * test command: ./raycast -b 5 +s +l +r +c +p +b2 +a1
        * intersection test:  1824239104
        * total time:         40.3423 secs
    * Render all chess pieces  
      * test command: ./raycast -b 5 +s +l +r +c +p +b3 +a2
        * intersection test:  2227014896
        * total time:         54.0535 secs

  * __Spatial Grid Accelerated__[]
    * Render 1 low-resolution chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b0 +a2
        * intersection test:  6016833
        * total time:         0.573864 secs
    * Render 2 low-resolution chess pieces
      * test command: ./raycast -b 5 +s +l +r +c +p +b1 +a2
        * intersection test:  12806875
        * total time:         0.868053 secs
    * Render 2 high-resolution chess pieces  
      * test command: ./raycast -b 5 +s +l +r +c +p +b2 +a2
        * intersection test:  16696711
        * total time:         1.09135 secs
    * Render all chess pieces  
      * test command: ./raycast -b 5 +s +l +r +c +p +b3 +a2
        * intersection test:  32329882
        * total time:         1.79325 secs

* Analysis
	* With my simple bounding box algorithm, I could decrease a order of magnitudes from the number of ray-triangle intersection in naive version of algorithm. 
  * With the spatial grid algorithm, it could further decrease two order of magnitude from the number of ray-triangle intersection in naive version of algorithm. 

## Project Structure

* Project Folder
  * object.h            - base class for all shape primitive
  * box.hpp             - bounding box volume class
  * ray.hpp             - ray class
  * sphere.hpp          - sphere class
  * scene.h/.cpp        - rendering scene setting up
  * trace.h/.hpp        - ray tracing algorithm
  * matrix.hpp          - 4 by 4 matrix helper function
  * vector.hpp          - 3d vector helper function
  * image_util.h/.cpp   - image writing
  * chess.h/.cpp        - chess class for processing chess object
  * chessboard.hpp      - chess board class
  * triangle.hpp        - triangle class, triangle mesh class
  * global.h            - global macro and variable

## Notice: 

In this assignment, I made a dual compilable version to linux machine and mac os x. However, as mac os x does not support some stale glut functionality, I basically disabled the openGL display mode in the mac compilation. And instead, I made the mac version to write a image after the rendering process
